@page "/"
@inject WorldBackpacker.Services.LocationService LocationService
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<!-- Map container -->
<div id="myMap" style="height: 800px; width: 100%;"></div>

@code {
    private List<(float Latitude, float Longitude)> locations = new List<(float Latitude, float Longitude)>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            locations = await LocationService.GetCoordinates();
            if (locations == null || !locations.Any())
            {
                Logger.LogInformation("Locations is null or empty!");
            }
            
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        if (firstRender)
        {

            try
            {
                if (locations != null && locations.Any())
                {
                    Logger.LogInformation("Locations available, calling JS to render map,");
                    var locationArray = new List<object>(); 
                    foreach (var location in locations)
                    {
                        locationArray.Add(new { Latitude = location.Latitude, Longitude = location.Longitude });
                    }

                    await JSRuntime.InvokeVoidAsync("InitMap", locationArray);
                }
                else
                {
                    Logger.LogInformation("No locations available.");
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }
}
