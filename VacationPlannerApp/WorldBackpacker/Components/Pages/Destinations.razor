@page "/destinations"
@inject WorldBackpacker.Services.GetRecommendedCitiesService GetRecommendedCitiesService
@inject WorldBackpacker.Services.GetPreferenceService GetPreferenceService
@inject NavigationManager Navigation
@inject RecommendationService RecommendationService
@rendermode InteractiveServer

<PageTitle>Destinations</PageTitle>

<h2><center>Find your ideal vacation spot</center></h2>

<EditForm Model="@userChoice" OnValidSubmit="GetFilteredDestinations" FormName="Name" id="form">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <br />
    <br />
    <h5>Choose your budget</h5>
    <div class="form-group">
        <select id="budget" @bind="userChoice.Budget" class="form-control">
            <option value="">Select Budget</option>
            <option value=1>Very Low</option>
            <option value=2>Low</option>
            <option value=3>Moderate</option>
            <option value=4>High</option>
            <option value=5>Very High</option>
        </select>
    </div>

    <h5>Start date of your trip</h5>
    <div class="form-group">
        <InputDate id="startDate" @bind-Value="userChoice.StartDate" class="form-control" />
    </div>

    <h5>End date of your trip</h5>
    <div class="form-group">
        <InputDate id="endDate" @bind-Value="userChoice.EndDate" class="form-control" />
    </div>

    <!-- Activity Checkboxes -->
    <h5>Select prefered activities and surroundings</h5>
    @foreach (var activity in new[] { "Skiing", "Sightseeing", "Beach", "Lakes", "Kayaking", "Sailing", "Ocean", "Sea", "Hiking", "Nature" })
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="@activity" value="@activity" @onchange="(e) => UpdateList(userChoice.Activities, activity, (bool)e.Value)" />
            <label class="form-check-label" for="@activity">@activity</label>
        </div>
    }

    <!-- Continent Selection -->
    <h5>Select region</h5>
    @foreach (var continent in new[] { "Asia", "Europe", "Africa", "Northern America", "Caribbean", "South America", "Oceania and Australia" })
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="@continent" value="@continent" @onchange="(e) => UpdateList(userChoice.Continents, continent, (bool)e.Value)" />
            <label class="form-check-label" for="@continent">@continent</label>
        </div>
    }

    <!-- Weather Preferences -->
    <h5>Select weather preferences</h5>
    @foreach (var weather in new[] { "Very Hot (>32°C)", "Hot (23°C-32°C)", "Warm (15°C-23°C)", "Cool (10°C-15°C)", "Cold (0°C-10°C)", "Freezing (-10°C - 0°C)", "Super Freezing (<-10°C)" })
    {
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="@weather" value="@weather" @onchange="(e) => UpdateList(userChoice.Weather, weather, (bool)e.Value)" />
            <label class="form-check-label" for="@weather">@weather</label>
        </div>
    }

    <button type="submit" class="btn btn-primary" id="submit">Filter Destinations</button>
</EditForm>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@code {
    private string? errorMessage;

    private Choice userChoice = new Choice();

    private List<Recommendation>? recommendedDestinations;

    private async Task GetFilteredDestinations()
    {
        try
        {
            if (userChoice.EndDate < userChoice.StartDate)
            {
                errorMessage = "Do you want to finish your trip before it starts? 🤯 Please enter End Date after Start Date.";
                recommendedDestinations = null; 
                return;
            }
            if (userChoice.Budget==null)
            {
                errorMessage = "Please enter you budget, you can choose 'Very High' if you want to see all budget options:).";
                recommendedDestinations = null;
                return;
            }
            else{ errorMessage = ""; }
            var preference = GetPreferenceService.GetPreferences(userChoice);
            GetRecommendedCitiesService getRecommendedCitiesService = new GetRecommendedCitiesService(connectionString: "Server=windows-ania\\MSSQLSERVER2;Database=vacation_cities;User Id=sa;Password=ania1111;TrustServerCertificate=True;MultipleActiveResultSets=True;");
            recommendedDestinations = await getRecommendedCitiesService.GetRecommendations(preference: preference);
            if (recommendedDestinations != null)
            {
                RecommendationService.Recommendations = recommendedDestinations;
                Navigation.NavigateTo("/recommendations");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching destinations: {ex.Message}");
        }
    }

    private void UpdateList(List<string> targetList, string option, bool isChecked)
    {
        if (isChecked)
        {
            if (!targetList.Contains(option))
            {
                targetList.Add(option);
            }
        }
        else
        {
            if (targetList.Contains(option))
            {
                targetList.Remove(option);
            }
        }
    }

}
